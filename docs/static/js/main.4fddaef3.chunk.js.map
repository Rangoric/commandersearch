{"version":3,"sources":["search/SearchStore.tsx","search/search.criteria.component.tsx","search/empty.results.tsx","cards/card.tsx","cards/cards.tsx","search/search.results.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchCriteria","Object","classCallCheck","this","name","type","text","orderBy","SearchData","Results","Criteria","SearchContext","React","createContext","SearchStoreState","refreshResults","onCriteriaChange","event","clearCriteria","SearchStore","_Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","inherits","createClass","key","value","_refreshResults","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","next","axios","get","params","sent","setState","data","cards","filter","t","imageUrl","stop","apply","arguments","targetElement","currentTarget","targetName","targetValue","objectSpread","defineProperty","react_default","createElement","Provider","children","Component","TextSearchCriteria","label","onChange","className","htmlFor","id","SearchCriteriaComponent","Consumer","_ref","onClick","EmptyResults","CardComponent","Card","src","alt","setName","CardsComponent","Cards","map","card_CardComponent","SearchResultsComponent","length","cards_CardsComponent","App","search_criteria_component_SearchCriteriaComponent","search_results_component_SearchResultsComponent","Boolean","window","location","hostname","match","ReactDOM","render","SearchStore_SearchStore","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fddaef3.chunk.js","sourcesContent":["import React, { Component, useImperativeHandle, EventHandler, FormEvent } from 'react';\nimport { Card } from '../cards/card';\nimport axios from 'axios';\n\nexport class SearchCriteria {\n    name:string = \"\";\n    type:string = \"\";\n    text:string = \"\";\n    orderBy:string = \"name\";\n}\n\nclass ApiResult {\n    cards:Card[] = [];\n}\nexport class SearchData {\n    constructor(){\n    }\n    Results:Card[] = [];\n    Criteria:SearchCriteria = new SearchCriteria();\n}\n\nexport class SearchStoreState {\n    SearchData = new SearchData();\n    refreshResults:() => void = () => {};\n    onCriteriaChange:(event:FormEvent<HTMLInputElement>) => void = (event:FormEvent<HTMLInputElement>) => {};\n    clearCriteria:() => void = () => {};\n}\n\nexport const SearchContext = React.createContext(new SearchStoreState());\n\nexport class SearchStore extends Component<{}, SearchData> {\n    constructor(props:{}) {\n        super(props,new SearchData());\n        this.refreshResults = this.refreshResults.bind(this);\n        this.onCriteriaChange = this.onCriteriaChange.bind(this);\n        this.clearCriteria = this.clearCriteria.bind(this);\n        this.state = new SearchData();\n    }\n    async refreshResults() {\n        const result = \n            await axios.get<ApiResult>(\n                \"https://api.magicthegathering.io/v1/cards\",\n                {\n                    params:this.state.Criteria\n                });\n\n        this.setState({Results:result.data.cards.filter(t => t.imageUrl)});\n    }\n    onCriteriaChange(event:FormEvent<HTMLInputElement>) {\n        var targetElement = event.currentTarget;\n        var targetName = targetElement.name;\n        var targetValue = targetElement.value;\n        this.setState({Criteria:{...this.state.Criteria, [targetName]:targetValue}});\n    }\n    clearCriteria() {\n        this.setState({Criteria:new SearchCriteria()});\n    }\n    render() {\n        return (\n            <SearchContext.Provider value={{\n                SearchData:this.state, \n                refreshResults:this.refreshResults,\n                onCriteriaChange:this.onCriteriaChange,\n                clearCriteria:this.clearCriteria}}>\n                {this.props.children}\n            </SearchContext.Provider>\n        );\n    }\n}","import React, { Component, FormEvent } from 'react';\nimport { SearchContext } from './SearchStore';\n\nconst TextSearchCriteria = (label:string, name:string, value:string, onChange:(event:FormEvent<HTMLInputElement>) => void) =>\n    <div className=\"row\">\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <input\n                className=\"form-control\"\n                name={name}\n                id={name}\n                value={value}\n                onChange={onChange}/>\n        </div>\n    </div>\n\nexport class SearchCriteriaComponent extends Component {\n    render() {\n        return (\n            <div>\n                <p>Search Criteria</p>\n                <SearchContext.Consumer>\n                    { ({SearchData, refreshResults, onCriteriaChange, clearCriteria}) => (\n                        <div>\n                            {TextSearchCriteria(\"Name Filter:\", \"name\", SearchData.Criteria.name, onCriteriaChange)}\n                            {TextSearchCriteria(\"Type Filter:\", \"type\", SearchData.Criteria.type, onCriteriaChange)}\n                            {TextSearchCriteria(\"Text Filter:\", \"text\", SearchData.Criteria.text, onCriteriaChange)}\n                            <div className=\"row\">\n                                <div className=\"col-6\">\n                                    <button className='btn btn-primary' onClick={refreshResults}>Search</button>\n                                </div>\n                                <div className=\"col-6\">\n                                    <button className=\"btn btn-secondary\" onClick={clearCriteria}>Clear</button>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </SearchContext.Consumer>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport const EmptyResults =\n    <div className=\"jumbotron\">\n        <h1>Welcome</h1>\n        <p>This is a simple <em>Magic: The Gathering</em> commander search.</p>\n        <p>\n            When making a commander deck, I usually have in mind the cards I want to use, or at least know what keywords I would want to be using.\n            This search is set up to make that easy.\n        </p>\n    </div>\n","import React, { Component } from \"react\";\n\nexport class Card {\n    name:string = \"\";\n    type:string = \"\";\n    text:string = \"\";\n    id:string = \"\";\n    setName:string = \"\";\n    imageUrl:string = \"\";\n}\n\nexport interface ICardProperty {\n    Card:Card;\n}\nexport interface ICardState {\n    Card:Card;\n}\nexport class CardComponent extends Component<ICardProperty, ICardState> {\n    constructor(props:ICardProperty) {\n        super(props);\n        this.state = {Card:props.Card};\n    }\n    render() {\n        return (\n            <div className=\"col-4\">\n                <div className='card'>\n                    <img className='card-image-top' src={this.state.Card.imageUrl} alt={this.state.Card.name}/>\n                    <div className='card-header'>{this.state.Card.name}<br/>({this.state.Card.setName})</div>\n                    <div className='card-body'>\n                        <p>{this.state.Card.type}</p>\n                        <p>{this.state.Card.text}</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Card, CardComponent } from \"./card\";\n\nexport interface ICardsProperty {\n    Cards:Card[];\n}\nexport interface ICardsState {\n    Cards:Card[];\n}\nexport class CardsComponent extends Component<ICardsProperty, ICardsState> {\n    constructor(props:ICardsProperty){\n        super(props);\n        this.state = { Cards:props.Cards };\n    }\n    render() {\n        return (\n            <div className='row'>\n                {this.state.Cards.map(t => (<CardComponent Card={t} key={t.id}/>))}\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { SearchContext } from './SearchStore';\nimport { EmptyResults } from './empty.results';\nimport { CardsComponent } from '../cards/cards';\n\nexport class SearchResultsComponent extends Component {\n    render() {\n        return (\n            <SearchContext.Consumer>\n                {({SearchData}) => (\n                    <div>\n                        {SearchData.Results.length ? <CardsComponent Cards={SearchData.Results}/> : EmptyResults}\n                    </div>\n                )}\n            </SearchContext.Consumer>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { SearchCriteriaComponent } from './search/search.criteria.component';\nimport { SearchResultsComponent } from './search/search.results.component';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-2\">\n              <SearchCriteriaComponent></SearchCriteriaComponent>\n            </div>\n            <div className=\"col\">\n              <SearchResultsComponent></SearchResultsComponent>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SearchStore } from './search/SearchStore';\n\nReactDOM.render(<SearchStore><App /></SearchStore>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}